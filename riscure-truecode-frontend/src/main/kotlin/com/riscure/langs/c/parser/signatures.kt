package com.riscure.langs.c.parser

import arrow.core.*
import com.riscure.langs.c.ast.*
import com.riscure.tc.codeanalysis.clang.ast.loader.ClangParsingResult
import com.riscure.tc.codeanalysis.clang.compiler2.loader.CompileCommandMapping
import org.bytedeco.javacpp.*
import org.bytedeco.llvm.clang.*
import org.bytedeco.llvm.global.clang
import org.bytedeco.llvm.global.clang.*
import org.bytedeco.llvm.global.clang.clang_parseTranslationUnit2 as clang_parse
import java.io.File
import java.util.*

/**
 * This implements the parser interface using the Bytedeco library to call
 * into libclang to parse a C file.
 *
 * This is *not* thread-safe.
 */
class ClangParser(val ccMap : CompileCommandMapping = CompileCommandMapping()): Parser {

    fun <T> load(file: File, handler: (tuCursor: CXCursor) -> Result<T>): Result<T> {
        val args: Array<String> = arrayOf("")

        // We allocate the arguments.
        val c_index: CXIndex = clang.clang_createIndex(0, 0)
        val c_tu = CXTranslationUnit()
        val c_sourceFile = BytePointer(file.absolutePath.toString())
        val c_arg_pointers = args.map { BytePointer(it) }
        val c_args = PointerPointer<BytePointer>(args.size.toLong())
        val c_parseOptions = clang.CXTranslationUnit_SingleFileParse

        c_arg_pointers.forEach { c_args.put(it) }

        // Define the deallocator
        fun free() {
            clang.clang_disposeIndex(c_index)
            clang.clang_disposeTranslationUnit(c_tu)
            c_sourceFile.close()
            c_arg_pointers.forEach { it.deallocate() }
            c_args.deallocate()
        }

        // Call into libclang via bytedeco
        val code: Int = clang_parse(c_index, c_sourceFile, c_args, args.size, null, 0, c_parseOptions, c_tu)

        try {
            // Interpret the result code generated by clang:
            val result = ClangParsingResult.fromCode(code)
            return if (result != ClangParsingResult.Success) {
                result.message.left()
            } else {
                // transform the translation unit outputted by clang to a real Java AST object
                val cursor = clang_getTranslationUnitCursor(c_tu)
                return handler(cursor)
            }
        } finally { free() }
    }

    override fun parse(file: File): Result<TranslationUnit> =
        load(file) { cursor ->
            cursor.asTranslationUnit()
        }
}

fun CXCursor.children(): List<CXCursor> {
    val cs = mutableListOf<CXCursor>()

    clang_visitChildren(
        this,
        object: CXCursorVisitor() {
            override fun call(self: CXCursor?, parent: CXCursor?, p2: CXClientData?): Int {
                cs.add(self!!)
                return CXChildVisit_Continue
            }
        },
        null)

    return cs
}

/**
 * A function that turns a CXString into a Java string,
 * *without* freeing the underlying memory!
 * Use with caution.
 */
fun CXString.get(): String = clang_getCString(this).string

fun CXCursor.spelling(): String = clang_getCursorSpelling(this).string
fun CXCursor.kindName(): String = clang_getCursorKindSpelling(kind()).string

fun <T> CXCursor.ifKind(k: Int, expectation: String, whenMatch: () -> Result<T>): Result<T> {
    if (kind() != k) {
        return "Expected ${expectation}. Got cursor of kind ${kind()}".left()
    }

    return whenMatch()
}

fun CXCursor.asTranslationUnit(): Result<TranslationUnit> {
    if (this.kind() != CXCursor_TranslationUnit) {
        return "Expected translation unit, got cursor of kind ${this.kindName()}".left()
    }

    return this.children()
        .map { it.asGlobalDecl() }
        .sequenceEither()
        .map { TranslationUnit(it) }
}

fun CXCursor.asGlobalDecl(): Result<TopLevel> {
    return when (kind()) {
        CXCursor_FunctionDecl ->
            if (children().any { child -> child.kind() == CXCursor_CompoundStmt })
                asFunctionDef()
            else asFunctionDecl()
        CXCursor_StructDecl   -> this.asStructDecl()
        CXCursor_VarDecl      -> this.asVarDecl()
        CXCursor_TypedefDecl  -> this.asTypedef()
        else -> "Expected global declaration".left()
    }
}

fun CXCursor.asTypedef(): Result<TopLevel.Typedef> =
    ifKind (CXCursor_TypedefDecl, "typedef") {
        clang_getTypedefDeclUnderlyingType(this).asType().map { type ->
            TopLevel.Typedef(clang_getTypedefName(clang_getCursorType(this)).string, type)
        }
    }

fun CXCursor.asStructDecl(): Result<TopLevel.Composite> =
    ifKind (CXCursor_StructDecl, "struct declaration") {
        TopLevel.Composite(
            this.spelling(),
            StructOrUnion.Struct,
            listOf() // TODO
        ).right()
    }

fun CXCursor.asVarDecl(): Result<TopLevel.VarDecl> =
    ifKind (CXCursor_VarDecl, "variable declaration") {
        clang_getCursorType(this)
            .asType()
            .map { TopLevel.VarDecl(this.spelling(), it) }
    }

fun CXCursor.getResultType(): Result<Type> {
    val typ = clang_getCursorResultType(this)
    return typ.asType()
}

fun CXCursor.getParameters(): Result<List<Param>> {
    val nargs = clang_Cursor_getNumArguments(this)
    return (0 until nargs)
        .map { clang_Cursor_getArgument(this, it) }
        .map { it.asParam() }
        .sequenceEither()
}

fun CXCursor.asFunctionDef(): Result<TopLevel.FunDef> = ifKind(CXCursor_FunctionDecl, "function declaration") {
    this.getResultType().flatMap { resultType ->
        this.getParameters().map { params ->
            TopLevel.FunDef(
                false,  // TODO
                spelling(),
                resultType,
                params,
                false, // TODO
            )
        }
    }
}

fun CXCursor.asFunctionDecl(): Result<TopLevel.FunDecl> = ifKind(CXCursor_FunctionDecl, "function declaration") {
    this.getResultType().flatMap { resultType ->
        this.getParameters().map { params ->
            TopLevel.FunDecl(
                false,  // TODO
                spelling(),
                resultType,
                params,
                false, // TODO
            )
        }
    }
}

fun CXCursor.asParam(): Result<Param> {
    if (kind() != CXCursor_ParmDecl) {
        return "Exepected parameter declaration".left()
    }

    return clang_getCursorType(this)
        .asType()
        .map { type -> Param(spelling(), type) }
}

// CXType extensions

fun CXType.spelling(): String = clang_getTypeSpelling(this).string

/* Type declarations yield an assignable type */
fun CXCursor.asTypeDeclType(): Result<Type> =
    when(kind()) {
        CXCursor_EnumDecl   -> Type.Enum(spelling()).right()
        CXCursor_StructDecl -> Type.Struct(spelling()).right()
        CXCursor_UnionDecl  -> Type.Union(spelling()).right()
        else -> "Expected a type declaration, got ${kindName()}".left()
    }

/* Typedefs yield an assignable type */
fun CXCursor.asTypedefType(): Result<Type> =
    when(kind()) {
        CXCursor_TypedefDecl -> clang_getTypedefDeclUnderlyingType(this).asType()
        else -> "Expected a typedef, got ${kindName()}".left()
    }

fun CXType.asType(): Result<Type> =
    when (this.kind()) {
        CXType_Void -> Type.Void().right()
        CXType_Bool -> Type.Int(IKind.IBoolean).right()
        CXType_Char_U -> Type.Int(IKind.IUChar).right() // correct?
        CXType_UChar  -> Type.Int(IKind.IUChar).right() // correct?
        CXType_UShort  -> Type.Int(IKind.IUShort).right()
        CXType_UInt  -> Type.Int(IKind.IUInt).right()
        CXType_ULong  -> Type.Int(IKind.IULong).right()
        CXType_ULongLong  -> Type.Int(IKind.IULongLong).right()
        CXType_Char_S -> Type.Int(IKind.IChar).right() // correct?
        CXType_SChar -> Type.Int(IKind.ISChar).right() // correct?
        CXType_Short -> Type.Int(IKind.IShort).right()
        CXType_Int -> Type.Int(IKind.IInt).right()
        CXType_Long -> Type.Int(IKind.ILong).right()
        CXType_LongLong -> Type.Int(IKind.ILongLong).right()

        CXType_Float -> Type.Float(FKind.FFloat).right()
        CXType_Double -> Type.Float(FKind.FDouble).right()
        CXType_LongDouble -> Type.Float(FKind.FLongDouble).right()

        CXType_Pointer -> clang_getPointeeType(this).asType().map { Type.Ptr(it) }
        CXType_Record  -> Type.Struct(spelling()).right()
        CXType_Elaborated -> clang_getTypeDeclaration(this).asTypeDeclType()
        CXType_Enum    -> TODO()
        CXType_Typedef -> clang_getTypeDeclaration(this).asTypedefType().map { Type.Named(spelling(),it) }
        CXType_ConstantArray ->
            clang_getArrayElementType(this)
                .asType()
                .map { Type.Array(it, Optional.of(clang_getArraySize(this))) }
        CXType_IncompleteArray ->
            clang_getArrayElementType(this)
                .asType()
                .map { Type.Array(it) }

        // others that could occur in C?

        else -> "Could not parse type of kind '${this.kind()}'".left()
    }